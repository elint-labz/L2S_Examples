#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
Adafruit_PCD8544 display = Adafruit_PCD8544(8, 9, 10, 12, 11);
#define pir A5
#define number_of_74hc595s 3
#define numOfRegisterPins number_of_74hc595s*8
boolean registers[numOfRegisterPins];
int a;
int SER_Pin=A1;
int RCLK_Pin=6;
int SRCLK_Pin = 5;
 const byte thief[] PROGMEM = {88,48,
B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000011,B11111111,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000111,B11111111,B11000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00001111,B11111111,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00001111,B11111111,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000111,B11111111,B11000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000011,B11111111,B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B11111110,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00111100,B00111111,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B11111111,B11111111,B10000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000011,B11111110,B11111111,B11111111,B11111000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000011,B11111100,B11111110,B11111111,B11111110,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B11111111,B10111111,B11111111,B11000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B11111111,B10111111,B11111111,B11100000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B11111111,B10111111,B11111111,B11111000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B11111111,B10111111,B11111111,B11111100,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00111101,B11111111,B10111111,B11111111,B11111110,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000001,B11111111,B11111111,B11111111,B11111110,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000001,B11111111,B10111111,B11111111,B11111111,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000001,B11111111,B10111111,B11111111,B11111111,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000001,B11111111,B10111111,B11111111,B11111111,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000001,B11111111,B10111111,B11111111,B11111111,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000001,B11111111,B11011111,B11111111,B11111110,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000001,B11111111,B11011111,B11111111,B11111110,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000011,B11111111,B11001111,B11111111,B11111000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000111,B11111111,B10000011,B11111111,B11000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00001111,B11111111,B11000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00011111,B11111111,B11000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00111111,B11111111,B11000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B11011111,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B10011111,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B00001111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111110,B00000111,B11111100,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B00000011,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B00000001,B11111111,B11000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111111,B00000000,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B00000000,B00111111,B11111100,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B00000000,B00001111,B11111110,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B00000000,B00000011,B11111100,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B01111110,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
};
const byte face[] PROGMEM = {88,48,
B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00001111,B11111111,B11000000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000001,B11100000,B00000000,B00111110,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00011110,B00000000,B00000000,B00000001,B11000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B01100000,B00000000,B00000000,B00000000,B00111000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000001,B10000000,B00000000,B00000000,B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00000000,B00000000,B00000000,
B00000000,B00011000,B00000000,B00000000,B00000000,B00000000,B00000000,B01000000,B00000000,B00000000,B00000000,
B00000000,B00100000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00000000,B00000000,B00000000,
B00000000,B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00011000,B00000000,B00000000,B00000000,
B00000001,B10000000,B00000000,B00100000,B00000000,B00100000,B00000000,B00000100,B00000000,B00000000,B00000000,
B00000011,B00000000,B00000000,B11110000,B00000000,B11111000,B00000000,B00000010,B00000000,B00000000,B00000000,
B00000110,B00000000,B00000000,B11111000,B00000000,B11111000,B00000000,B00000001,B00000000,B00000000,B00000000,
B00000100,B00000000,B00000001,B11111000,B00000001,B11111100,B00000000,B00000000,B10000000,B00000000,B00000000,
B00001000,B00000000,B00000001,B11111000,B00000001,B11111100,B00000000,B00000000,B11000000,B00000000,B00000000,
B00010000,B00000000,B00000001,B11111000,B00000001,B11111100,B00000000,B00000000,B01000000,B00000000,B00000000,
B00010000,B00000000,B00000000,B11111000,B00000000,B11111000,B00000000,B00000000,B00100000,B00000000,B00000000,
B00100000,B00000000,B00000000,B11110000,B00000000,B11111000,B00000000,B00000000,B00100000,B00000000,B00000000,
B00100000,B00000000,B00000000,B00100000,B00000000,B00100000,B00000000,B00000000,B00010000,B00000000,B00000000,
B01100000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00011000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00011000,B00000000,B00000000,
B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B00000000,B00000000,
B00100000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,B00000000,B00000000,
B00100000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00000000,B00000000,
B00110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00100000,B00000000,B00000000,
B00010000,B00000000,B10000000,B00000000,B00000000,B00000000,B00001100,B00000000,B01100000,B00000000,B00000000,
B00011000,B00000001,B11000000,B00000000,B00000000,B00000000,B00001110,B00000000,B01000000,B00000000,B00000000,
B00001000,B00000001,B11000000,B00000000,B00000000,B00000000,B00001100,B00000000,B10000000,B00000000,B00000000,
B00000100,B00000000,B01100000,B00000000,B00000000,B00000000,B00011000,B00000001,B10000000,B00000000,B00000000,
B00000010,B00000000,B00110000,B00000000,B00000000,B00000000,B00110000,B00000011,B00000000,B00000000,B00000000,
B00000001,B00000000,B00011100,B00000000,B00000000,B00000000,B11000000,B00000110,B00000000,B00000000,B00000000,
B00000000,B10000000,B00000111,B00000000,B00000000,B00000011,B10000000,B00001100,B00000000,B00000000,B00000000,
B00000000,B01100000,B00000001,B11000000,B00000000,B00011110,B00000000,B00010000,B00000000,B00000000,B00000000,
B00000000,B00110000,B00000000,B00111111,B00000011,B11110000,B00000000,B00100000,B00000000,B00000000,B00000000,
B00000000,B00001100,B00000000,B00000011,B11111110,B00000000,B00000000,B11000000,B00000000,B00000000,B00000000,
B00000000,B00000011,B00000000,B00000000,B00000000,B00000000,B00000011,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000001,B11000000,B00000000,B00000000,B00000000,B00001100,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00110000,B00000000,B00000000,B00000000,B01110000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000111,B00000000,B00000000,B00000111,B10000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B11111100,B00000001,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
};

const byte logo_el[] PROGMEM = {16,10,
B00000000,B00000000,
B11111010,B00000000,
B11111010,B00000000,
B00000010,B00000000,
B11111010,B00000000,
B11111010,B00000000,
B00000010,B00000000,
B11111011,B11000000,
B11111011,B11000000,
B00000000,B00000000,};
void setup()
{
  pinMode(SER_Pin,OUTPUT);
  pinMode(RCLK_Pin,OUTPUT);
  pinMode(SRCLK_Pin,OUTPUT);
  clearRegisters();
  writeRegisters();
  pinMode(pir,INPUT);
  pinMode(2,OUTPUT);
  display.begin();
  
  display.setContrast(50);
  display.clearDisplay();
  display_El_logo();
  display_L2S();
  display_title();
  display.drawBitmap(70,35,logo_el,10,10,BLACK);
  display.drawRect(0,0,84,48,BLACK);
 
     
}
void loop()
{  display.drawRoundRect(0, 0, 84 , 48, 9, 4);
       a=digitalRead(pir);
  if (digitalRead(pir) == HIGH)
  {
    digitalWrite(2,HIGH);
    display.drawBitmap(4,0,thief,84,48,BLACK);
    display.setCursor(1,20);
    display.println("INTRUDER");
    display.setTextSize(1);
    display.setTextColor(BLACK);
    display.display();
    display.clearDisplay();
  }
  else
  {
    digitalWrite(2,LOW);
    display.drawBitmap(-7,0,face,84,48,BLACK);
    display.setCursor(6,22);
    display.println(" NO INTRUDER");
    display.setTextSize(1);
    display.setTextColor(BLACK);
    display.display();
    display.clearDisplay();
  }
  
}
void clearRegisters(){
  for(int i = numOfRegisterPins - 1; i >=  0; i--){
     registers[i] = LOW;
  }
  writeRegisters();
} 


//Set and display registers
//Only call AFTER all values are set how you would like (slow otherwise)
void writeRegisters(){

  digitalWrite(RCLK_Pin, LOW);

  for(int i = numOfRegisterPins - 1; i >=  0; i--){
    digitalWrite(SRCLK_Pin, LOW);

    int val = registers[i];

    digitalWrite(SER_Pin, val);
    digitalWrite(SRCLK_Pin, HIGH);

  }
  digitalWrite(RCLK_Pin, HIGH);

}


//******************Elint labz logic****************//
void display_El_logo()
{
   display.fillRect(15,2,21,6,BLACK);
   display.fillRect(15,12,21,6,BLACK);
   display.fillRect(15,22,21,6,BLACK);
   display.fillRect(45,2,6,26,BLACK);
   display.fillRect(50,22,18,6,BLACK);
   display.setCursor(15,35);
   display.print("ElintLabz");
   display.display();
   delay(5000);
   display.clearDisplay();
}

//******************L2S****************//
void display_L2S()
{
  display.drawRect(0, 0, 84 , 48,BLACK);
  display.setCursor(26, 10);
  display.println("LEARN");
  display.setCursor(38,20);
  display.println("2");
  display.setCursor(22,30);
  display.println("SOLDER");
  display.display(); 
  delay(5000);
  display.clearDisplay();
}

//******************Title****************//
void display_title()
{
  display.drawRect(0, 0, 84 , 48,BLACK);
  display.setCursor(2,12);
  display.println("INTRUDER");
  display.setCursor(2,22);
  display.println("DETECTION");
  display.setCursor(2,32);
  display.println("SYSTEM");
  display.drawBitmap(70,35,logo_el,10,10,BLACK);
  display.display(); 
  delay(5000);
  display.clearDisplay();
}
